/**
给定一个单链表 L：L0→L1→…→Ln-1→Ln ，
将其重新排列后变为： L0→Ln→L1→Ln-1→L2→Ln-2→…

你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。

示例 1:

给定链表 1->2->3->4, 重新排列为 1->4->2->3.
示例 2:

给定链表 1->2->3->4->5, 重新排列为 1->5->2->4->3.

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/reorder-list
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public void reorderList(ListNode head) {
        if(head == null || head.next == null){
            return ;
        }
        
//         找链表中点
        ListNode mid1 = head;
        ListNode mid2 = head;
        while(mid2.next != null && mid2.next.next != null){
            mid1 = mid1.next;
            mid2 = mid2.next.next;
        }
//         反转后半部分链表，mid1处于链表中间前一个的位置
        ListNode preMid = mid1;
        ListNode preCur = mid1.next;
        while(preCur.next != null){
            ListNode current = preCur.next;
            preCur.next = current.next;
            current.next = preMid.next;
            preMid.next = current;
        }
//         交叉
        mid1 = head;
        mid2 = preMid.next;
        while(mid1 != preMid){
            preMid.next = mid2.next;
            mid2.next = mid1.next;
            mid1.next = mid2;
            mid1 = mid2.next;
            mid2 = preMid.next;
        }
        
        
    }
}
