class LRUCache {

    int cap;
    HashMap<Integer, DListNode> map;
    DListNode head;
    DListNode tail;
    int size;
    
    class DListNode {
        DListNode pre;
        DListNode next;
        int key;
        int val;
        
        DListNode(int key, int value) {
            this.key = key;
            val = value;
        }
        
    }
    
    
    public LRUCache(int capacity) {
        size = 0;
        cap = capacity;
        map = new HashMap<>();
        head = new DListNode(-1, -1);
        tail = new DListNode(-1, -1);
        head.next = tail;
        head.pre = null;
        tail.pre = head;
        tail.next = null;
    }
    
    public int get(int key) {
        if (!map.containsKey(key))
            return -1;
        else {
            DListNode node = map.get(key);
            node.pre.next = node.next;
            node.next.pre = node.pre;
            head.next.pre = node;
            node.next = head.next;
            head.next = node;
            node.pre = head;
            return node.val;
        }
    }
    
    public void put(int key, int value) {
        if (!map.containsKey(key) && size < cap) {
            DListNode node = new DListNode(key, value);
            map.put(key, node);
            node.next = head.next;
            head.next.pre = node;
            head.next = node;
            node.pre = head;
            size++;
        }
        else if (map.containsKey(key)) {
            DListNode node = map.get(key);
            node.val = value;
            node.pre.next = node.next;
            node.next.pre = node.pre;
            node.next = head.next;
            head.next.pre = node;
            head.next = node;
            node.pre = head;
        }
        else {
            DListNode node = new DListNode(key, value);
            map.put(key, node);
            node.next = head.next;
            head.next.pre = node;
            head.next = node;
            node.pre = head;

            map.remove(tail.pre.key);
            tail.pre.pre.next = tail;
            tail.pre = tail.pre.pre;
        }
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
