/**
反转从位置 m 到 n 的链表。请使用一趟扫描完成反转。

说明:
1 ≤ m ≤ n ≤ 链表长度。

示例:

输入: 1->2->3->4->5->NULL, m = 2, n = 4
输出: 1->4->3->2->5->NULL

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/reverse-linked-list-ii
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode reverseBetween(ListNode head, int m, int n) {
//         emmmmmmmmmm。。。。
// //         处理空链
//         if(head == null){
//             return null;
//         }
        
//         ListNode cur = head;
//         ListNode prev = null;
//         while(m > 1){
//             prev = cur;
//              cur = cur.next;
//             m--;
//             n--;
//         }
//         ListNode con = prev;
//         ListNode tail = cur;
          
//         ListNode third = null;
//         while (n > 0){
//             third = cur. next;
//             cur.next = prev;
//             prev = cur;
//             cur = third;
//             n--;
//         }
        
//         if (con != null){
//             con.next = prev;
//         } else {
//           head = prev;   
//         }
        
//         tail.next = cur;
//         return head;
        
        if (m == n){
            return head;
        }
//         开个假头
/**
    1->2->3->4->5->NULL
    m = 2; n = 4;
    1->2->3->4->5->NULL
        <- <- 
    1->4->3->2->5->null


*/
        
        
        
        ListNode newHead = new ListNode(0);
        newHead.next = head;
//         
        ListNode node = newHead;
        for(int i = 0; i < m - 1; i++) {
            node = node.next;
        }
        ListNode one = node;
        ListNode two = one.next;
        ListNode three = one.next.next;
        ListNode last = two.next;
        
        for(int i = m; i < n; i++){
            ListNode temp = three.next;
            three.next = two;
            two = three;
            three = temp;
        }
        one.next.next = three;
        one.next = two;
        return newHead.next;
    }
}
